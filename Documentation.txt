this installer is organized into a few parts:

-the views have the ui design and use fxml files (download and use scene builder to edit these)
-css controlls the style of the pages
-the controllers have the ui logic
-the sevices have the logic that the is non-ui such as:
 	-page changes
	-filling in user input on pages
	-collecting user input and storing it
	-running installation scripts
	-editing files
	-setting up folder in user's home direcory to store installation scripts and information
-central infomation folder which contains classes such as:
	-classes to make running the installation scipts in another thread easier
	-a static class to store all variables across the application such as devMode and file locations

the general outline of what this installer does is:

1)the first time it is run it will create a folder in the user's home directory and set up folders and files for later steps
	-EMMSetup tools is where all scripts and default files such as mobile properties are stored
	-EMMInstaller folder is the parent folder and this will contain user_input as well as:
		*files that are set to false every time the application starts up to indicate whether scripts have been
			run successfully and will be set to "true" after successful execution.  These are used for
			logging purposes as well as validation between multiple languages and processes.
		*the file AllWSInfo.csv is generated by the WSLoginAndInfo.py with information from websphere to fill in 
			existing websphere information in choice boxes to eliminate the need for the user to sign into
			websphere while running the installer as well as serve as a login test to ensure the user's
			websphere credentials are correct
		*the log.txt file which will contain error messages as well as indicators as to where in the process there is an issue
2)the user will naviagate through the ui pages and based on the setup information they input there are different pages that are displayed
	these pages allow them to see the least amount possible setup options based on their setup
	-these ui pages have a standard javafx oganization structure where the logic is stored the initialize function.  
		the next page and previous page as well as user input objects can be specified in the setCommon function.
		the user input objects such as a choicebox must be added with a string key, which will be used to
		store and retreive the string value that the user inputs from the "user_input.csv" file in the EMMInstaller
		folder on the user's home directory.  This will allow the user to have their input values saved from one 
		install to another as well as let the python scripts read certain values from the file necessary to execute
		the scripts.  To find out which keys and values are being used in a python file, look at the python scripts.
	-additionally there are common functions such as disableUntilTrue in the page services, which allow textfields to be
		disabled until a choice box is set to true.
	-progess bars and indicators are also used throughout the installer.  These use a specific format that allows the ui to
		updated as tasks in different threads are completed.  This involves using listeners and "tasks" and the function
		"updateProgress(int progress, int total)" to tell the listener what to exepect as well as update the progress bar.
		there is lots of information about this from oracle as well as other internet resources.
3)once the user has navigated through all the ui pages and arrived on the install page, then the actual changes are made to the files selected
	throughout the installer. This includes the ezmaxmobile war file.  No changes are made to files outside of the EMMInstaller folder until
	this step to decrease the likelyhood of errors throughout the process. 
	-locations and existence of file are validated before the scripts are run and the specific errors found are specified in the
		log.txt file
	-the editing of the mobile properties, spring-emm, and license.interpro, are done using java. These edited files are then placed in the
		appropriate place in the file structure that replicates the file structure of the WEB-INF file of the ezmaxmobile.war 
		file in the "changewarfile" folder in the EMMInstaller folder.  The appropriate businessObjects.jar files are replicated
		from the MAXIMO.ear file to the appropriate place in the "changewarfile" folder.  This will depend on if LDAP connection
		is enabled or not. Additionally if LDAP mode is enabled the correct information for the LADP settings will be set up from
		the information the installer gathers from signing into webshere, using java.
	-the appropriate scipts then run depending on the type of setup the user has selected, based on information in the user_input.csv file
		*the scripts will stop upon any errors and update the log as appropriate

	**NOTE: the scrips are copied to the user's home directory on the first start up. To view changes to the scripts, delete the EMMInstaller
		folder in the user's home directory or run the main method in the ExternalService class**
 	